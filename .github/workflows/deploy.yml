name: SFDX CICD Pipeline

# Trigger pipeline on manual dispatch or push to specific branches
on:
  workflow_dispatch:
  push:
    branches: [ main, release/QA, release/UAT ]

jobs:
  deploy:
    # Run on Ubuntu and use a custom Docker container
    runs-on: ubuntu-latest
    container:
      image: jayadeepkumar61/sfdx-cicd-latest:latest
      credentials:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      options: --user root

    steps:
      # Checkout the source code
      - uses: actions/checkout@v3

      # Set Salesforce credentials dynamically based on branch
      - name: üéØ Set Target Org Credentials Based on Branch
        run: |
          echo "üì¶ Determining target org based on branch..."
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "Deploying to PROD..."
            echo "SFDC_USER=${{ vars.SFDC_PROD_USER }}" >> $GITHUB_ENV
            echo "SFDC_URL=${{ vars.SFDC_PROD_URL }}" >> $GITHUB_ENV
            echo "CONSUMER_KEY=${{ secrets.PROD_CONSUMER_KEY }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "release/QA" ]]; then
            echo "Deploying to QA..."
            echo "SFDC_USER=${{ vars.SFDC_QA_USER }}" >> $GITHUB_ENV
            echo "SFDC_URL=${{ vars.SFDC_QA_URL }}" >> $GITHUB_ENV
            echo "CONSUMER_KEY=${{ secrets.QA_CONSUMER_KEY }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "release/UAT" ]]; then
            echo "Deploying to UAT..."
            echo "SFDC_USER=${{ vars.SFDC_UAT_USER }}" >> $GITHUB_ENV
            echo "SFDC_URL=${{ vars.SFDC_UAT_URL }}" >> $GITHUB_ENV
            echo "CONSUMER_KEY=${{ secrets.UAT_CONSUMER_KEY }}" >> $GITHUB_ENV
          else
            echo "‚ùå Unsupported branch: $GITHUB_REF"
            exit 1
          fi

      # Authenticate to Salesforce using the JWT-based flow
      - name: üîê Authenticate with Salesforce
        run: |
          echo "üîê Decrypting private key and authenticating with Salesforce..."
          openssl enc -d -aes-256-cbc -in assets/server.key.enc -out assets/server.key -K ${{ secrets.AESKEY }} -iv ${{ secrets.IVKEY }}
          sfdx auth jwt grant \
            --client-id "$CONSUMER_KEY" \
            --username "$SFDC_USER" \
            --jwt-key-file assets/server.key \
            --instance-url "$SFDC_URL" \
            --alias sfdx-ci \
            --set-default
          echo "‚úÖ Authenticated with Salesforce."

      - name: üöÄ Validate & Deploy
        run: |
          echo "üîç Validating deployment..."
          sfdx force:source:convert -d mdapi
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            sfdx force:mdapi:deploy -d mdapi -w -1 -u "$SFDC_USER"
          else
            sfdx force:mdapi:deploy -c -d mdapi -u "$SFDC_USER" -w -1 -l RunSpecifiedTests -r ${{ vars.SFDC_TEST_CLASSES }}
          fi

      # Send Slack Notifications
      - name: üì¢ Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ *Deployment to '${{ env.DEPLOY_TARGET }}'* succeeded! \nBranch: '${{ github.ref_name }}' \nCommit: '${{ github.sha }}'"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: ‚ùå Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"üö® *Deployment to '${{ env.DEPLOY_TARGET }}'* failed! \nBranch: '${{ github.ref_name }}' \nCommit: '${{ github.sha }}'"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}